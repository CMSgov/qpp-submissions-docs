{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_lisp.85e53ee7.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/lisp.js"],"sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function (Prism) {\n    /**\n     * Functions to construct regular expressions\n     * e.g. (interactive ... or (interactive)\n     *\n     * @param {string} name\n     * @returns {RegExp}\n     */\n    function simple_form(name) {\n      return RegExp(/(\\()/.source + '(?:' + name + ')' + /(?=[\\s\\)])/.source)\n    }\n    /**\n     * booleans and numbers\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function primitive(pattern) {\n      return RegExp(\n        /([\\s([])/.source + '(?:' + pattern + ')' + /(?=[\\s)])/.source\n      )\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = /(?!\\d)[-+*/~!@$%^=<>{}\\w]+/.source // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var nestedPar =\n      /(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*/\n        .source\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:append|by|collect|concat|do|finally|for|in|return)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form(/declare/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form(/interactive/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive(/nil|t/.source),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive(/[-+]?\\d+(?:\\.\\d*)?/.source),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:const|custom|group|var)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            /(?:cl-)?(?:defmacro|defun\\*?)\\s+/.source +\n            symbol +\n            /\\s+\\(/.source +\n            nestedPar +\n            /\\)/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(\n          par +\n            'lambda\\\\s+\\\\(\\\\s*(?:&?' +\n            symbol +\n            '(?:\\\\s+&?' +\n            symbol +\n            ')*\\\\s*)?\\\\)'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(?:['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      varform: {\n        pattern: RegExp(\n          /\\(/.source + symbol + /\\s+(?=\\S)/.source + nestedPar + /\\)/.source\n        ),\n        inside: language\n      },\n      argument: {\n        pattern: RegExp(/(^|[\\s(])/.source + symbol),\n        lookbehind: true,\n        alias: 'variable'\n      },\n      rest: language\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + nestedPar + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:body|rest)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:aux|optional)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"],"names":["lisp","Prism","simple_form","name","RegExp","source","primitive","pattern","symbol","marker","par","nestedPar","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","varform","rest","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs","module","exports","displayName","aliases"],"sourceRoot":""}